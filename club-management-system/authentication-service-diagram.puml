@startuml Authentication Service

class AuthenticationService {
  - userDAO: UserDAO
  - currentUser: User
  + AuthenticationService()
  + login(username: String, password: String): boolean
  + logout(): void
  + getCurrentUser(): User
  + setCurrentUser(user: User): void
  + isLoggedIn(): boolean
  + isClubManager(): boolean
  + isGrade11(): boolean
  + isGrade9(): boolean
  + registerUser(username: String, password: String, email: String): boolean
  + changePassword(currentPassword: String, newPassword: String): boolean
  + resetPassword(username: String, securityAnswer: String, newPassword: String): boolean
  + validateCredentials(username: String, password: String): boolean
}

class UserDAO {
  - connection: Connection
  + UserDAO()
  + authenticate(username: String, password: String): User
  + getUserByUsername(username: String): User
  + getUserByEmail(email: String): User
  + insertUser(user: User): boolean
  + updatePassword(username: String, password: String): boolean
  + usernameExists(username: String): boolean
  + emailExists(email: String): boolean
  + updateLastLogin(userId: int): void
}

class User {
  - id: int
  - username: String
  - password: String
  - email: String
  - fullName: String
  - assignedClubId: Integer
  - isActive: boolean
  + User()
  + getId(): int
  + getUsername(): String
  + getPassword(): String
  + setPassword(password: String): void
  + isActive(): boolean
}

class PasswordHasher {
  + {static} hashPassword(password: String): String
  + {static} verifyPassword(password: String, hash: String): boolean
  + {static} generateSalt(): String
}

AuthenticationService "1" o-- "1" UserDAO : many-to-one
AuthenticationService "1" o-- "1" User : many-to-one
AuthenticationService --> PasswordHasher : uses
UserDAO --> User : uses

@enduml

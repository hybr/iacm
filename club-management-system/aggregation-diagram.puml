@startuml Club Aggregation Relationships (HAS-A)

class ClubManagementSystem {
    -name: String
    -version: String
    +initialize(): void
    +shutdown(): void
    +getClubs(): List<Club>
    +getUsers(): List<User>
}

class Club {
    -id: int
    -name: String
    +getName(): String
    +addMember(user: User): void
    +removeMember(user: User): void
    +getMembers(): List<User>
    +getSessions(): List<AttendanceSession>
}

class User {
    -id: int
    -username: String
    -fullName: String
    +getUsername(): String
    +getAttendanceRecords(): List<Attendance>
}

class AttendanceSession {
    -id: int
    -sessionDate: LocalDate
    -sessionTitle: String
    +createSession(): void
    +getAttendanceRecords(): List<Attendance>
}

class Attendance {
    -id: int
    -sessionDate: LocalDate
    -status: AttendanceStatus
    -notes: String
    +markPresent(): void
    +markAbsent(): void
    +addNotes(notes: String): void
}

enum AttendanceStatus {
    PRESENT
    ABSENT
    LATE
    EXCUSED
}

' Aggregation relationships (HAS-A)
ClubManagementSystem o-- Club : has many
Club o-- User : has members
Club o-- AttendanceSession : has sessions
AttendanceSession o-- Attendance : has records
User o-- Attendance : has records
Attendance o-- AttendanceStatus : has status

note right of ClubManagementSystem : System HAS-A collection of clubs\nand users (whole-part relationship)
note bottom of Club : Club HAS-A members and sessions\n(can exist without specific members)
note bottom of AttendanceSession : Session HAS-A attendance records\n(aggregates attendance data)

@enduml